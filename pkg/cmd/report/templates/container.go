package templates

import (
	"bytes"
	"io"
	"text/template"

	"github.com/davecgh/go-spew/spew"
	"github.com/listendev/lstn/pkg/listen"
)

const containerTpl = `
{{ $high := .HighPriority }}
{{ $medium := .MediumPriority }}
{{ $low := .LowPriority }}

**lstn** detected the following behaviors in dependency tree at installation time.

<br>

<details>
<summary>
:stop_sign: <b>{{ $high.TotalVerdicts }}</b> critical activities detected
</summary>
{{ $high.DetailsRender }}
</details>



<details>
<summary>
:warning: <b>{{ $medium.TotalVerdicts }}</b> medium activities detected
</summary>
{{ $medium.DetailsRender }}
</details>



<details>
<summary>
:large_blue_diamond: <b>{{ $low.TotalVerdicts }}</b> low activities detected
</summary>
{{ $low.DetailsRender }}
</details>

<br>

#### <img height=25 src="https://listen.dev/assets/images/dolphin-noborder.png"> generated by <a href="https://listen.dev">listen.dev</a>

`

type priortiyData struct {
	Packages      []listen.Package
	TotalVerdicts int
	DetailsRender string
}
type containerData struct {
	LowPriority    priortiyData
	MediumPriority priortiyData
	HighPriority   priortiyData
}

func countVerdicts(packages []listen.Package) int {
	var count int
	for _, p := range packages {
		count += len(p.Verdicts)
	}
	return count
}

func filterPackagesByVerdictPriority(packages []listen.Package, priority string) []listen.Package {
	filteredPackages := []listen.Package{}
	for _, p := range packages {
		if len(p.Verdicts) == 0 {
			continue
		}
		currentPackage := p
		currentPackage.Verdicts = []listen.Verdict{}
		for _, v := range p.Verdicts {
			if v.Priority == priority {
				currentPackage.Verdicts = append(currentPackage.Verdicts, v)
				break
			}
		}
		if len(currentPackage.Verdicts) > 0 {
			filteredPackages = append(filteredPackages, currentPackage)
		}
	}

	return filteredPackages
}

func renderDetails(packages []listen.Package) (string, error) {
	var detailsRender bytes.Buffer
	for _, p := range packages {
		if len(p.Verdicts) == 0 {
			continue
		}
		err := RenderSingleVerdictsPackage(&detailsRender, p)
		if err != nil {
			return "", err
		}
	}
	return detailsRender.String(), nil
}

func RenderContainer(
	w io.Writer,
	packages []listen.Package,
) error {
	highAlertPackages := filterPackagesByVerdictPriority(packages, "high")
	mediumAlertPackages := filterPackagesByVerdictPriority(packages, "medium")
	lowAlertPacakges := filterPackagesByVerdictPriority(packages, "low")
	spew.Dump(lowAlertPacakges)

	lowDetails, err := renderDetails(lowAlertPacakges)
	if err != nil {
		return err
	}
	lowPriorityData := priortiyData{
		Packages:      lowAlertPacakges,
		TotalVerdicts: countVerdicts(lowAlertPacakges),
		DetailsRender: lowDetails,
	}

	mediumDetails, err := renderDetails(mediumAlertPackages)
	if err != nil {
		return err
	}
	mediumPriorityData := priortiyData{
		Packages:      mediumAlertPackages,
		TotalVerdicts: countVerdicts(mediumAlertPackages),
		DetailsRender: mediumDetails,
	}

	highDetails, err := renderDetails(highAlertPackages)
	if err != nil {
		return err
	}
	highPriorityData := priortiyData{
		Packages:      highAlertPackages,
		TotalVerdicts: countVerdicts(highAlertPackages),
		DetailsRender: highDetails,
	}

	cdata := containerData{
		LowPriority:    lowPriorityData,
		MediumPriority: mediumPriorityData,
		HighPriority:   highPriorityData,
	}
	ct := template.Must(template.New("container").Parse(containerTpl))
	err = ct.Execute(w, cdata)
	if err != nil {
		return err
	}
	return nil
}
